# ベースクラス(元となるクラス)定義
class TestClass30{
    [string] hoge(){
        return "Hello PowerShell Class !!"
    }
}

# サブクラス(継承するクラス)定義
class TestClassMethodAdd : TestClass30 {
    [string] hoge2(){
        $Data = ([TestClass30]$this).hoge()
        $Data += "This is hoge2 !!"
        return $Data
    }
}

# インスタンス化
$TestObject = New-Object TestClassMethodAdd

# メソッドの実行
$TestObject.hoge2()



# ベースクラス(元となるクラス)定義
class TestClass30{
    [string] hoge(){
        return "Hello PowerShell Class !!"
    }
}

# サブクラス(継承するクラス)定義
class TestClass31 : TestClass30 {
    [string] hoge(){
        return "This is new hoge !!"
    }
}

# インスタンス化
$TestObject = New-Object TestClass31

# メソッドの実行
$TestObject.hoge()



# ベースクラス定義
class TestClass30{
    [string] hoge(){
        return "Hello PowerShell Class !!"
    }
}

# サブクラス定義
class TestClass32 : TestClass30 {
    [string] hoge(){
        $Result = ([TestClass30]$this).hoge()
        $Data = $Result + " And new hoge !!"
        return $Data
    }
}

# インスタンス化
$TestObject = New-Object TestClass32

# メソッドの実行
$TestObject.hoge()



# ベースクラス定義
class TestClass30{
    [string] hoge(){
        return "Hello PowerShell Class !!"
    }
}

# サブクラス定義
class TestClass33 : TestClass30 {
    
    [string] $NewString = " This is new hoge too !!"

    [string] newhoge(){
        $Result = ([TestClass30]$this).hoge()
        $Data = $Result + $this.NewString
        return $Data
    }
}

# インスタンス化
$TestObject = New-Object TestClass33

# メソッドの実行
$TestObject.newhoge()




# ベースクラス定義
class TestClass34
{
    # 内部データ
    [int] $Data

    # 初期値なしコンストラクタ
    TestClass34(){

        # 内部データに 0 をセット
        $this.Data = 0
    }

    # 初期値ありコンストラクタ(こちらが呼ばれる)
    TestClass34([int]$Indata){

        # 内部データに初期値をセット
        $this.Data = $Indata
    }

    # 内部データに加算して return するメソッド
    [int] Add([int]$Indata){

        # 内部データに加算
        $this.Data += $Indata

        # 内部データ return
        return $this.Data
    }
}

# サブクラスの定義
class TestClass35 : TestClass34{

    # 引数なしコンストラクタ
    TestClass35() : base() {
    }

    # 引数ありコンストラクタ
    TestClass35([int]$Indata) : base([int]$Indata) {
        # 継承元コンストラクタ処理後にこれが実行される
        ([TestClass34]$this).Data = ([TestClass34]$this).Data + $Indata * 2
    }
}

# インスタンス化(ベースクラスのコントラクタ実行後にサブクラスのコンストラクタが実行される)
$TestObject = New-Object TestClass35(10)

# メソッドの実行(ベースクラスのメソッドを使う)
$TestObject.Add(30)




# 大元クラス
class BaseClass{
    [int] $a = 5

    [int] BaseMethod([int] $input){
        return $this.a + $input
    }
}

# 大元クラスを継承した中間継承クラス
class MiddleClass : BaseClass{

    [int] $b

    [int] MiddleMethod([int] $input){
        return $this.b * $input
    }
}

# 中間継承クラスを継承した末端クラス
class SubClass : MiddleClass{

    [int] SubMethod([int] $input){
        # 大元クラスのメソッドだけど、中間継承クラスのメソッドとして呼び出せる
        [int]$c = ([MiddleClass]$this).BaseMethod( $input ) * 2
        return $c
    }
}

# 中間継承クラスを継承
$TestObject = New-Object SubClass

$TestObject.SubMethod(10)
